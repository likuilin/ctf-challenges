worker_processes  3;
error_log  logs/error.log;
pid        logs/nginx.pid;
worker_rlimit_nofile 8192;

events {
  worker_connections  1024;
}

http {
  default_type application/octet-stream;
  log_format   main '$host $remote_addr - $remote_user [$time_local]  $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log   logs/access.log  main;
  tcp_nopush   on;
  resolver 127.0.0.11 valid=30s;

  ssl_certificate /etc/letsencrypt/live/ctf.kuilin.net/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/ctf.kuilin.net/privkey.pem;

  # === ctfd ===
  server {
    listen 80;
    server_name ctf.kuilin.net;

    # force https on ctfd
    return 302 https://$host$request_uri;
  }
  server {
    listen 443 ssl;
    server_name ctf.kuilin.net;
    access_log logs/ctfd.access.log main;

    set $upstream_ctfd ctfd-web;

    # https://github.com/CTFd/CTFd/blob/master/conf/nginx/http.conf
    client_max_body_size 4G;
    location /events {
      proxy_pass http://$upstream_ctfd:8000;
      proxy_set_header Connection '';
      proxy_http_version 1.1;
      chunked_transfer_encoding off;
      proxy_buffering off;
      proxy_cache off;
      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $server_name;
    }

    location / {
      proxy_pass http://$upstream_ctfd:8000;
      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $server_name;
    }
  }

  # === chals ===
  server {
    listen 80;
    server_name wasmcloud.chal.ctf.kuilin.net;
    access_log logs/wasmcloud.access.log main;

    set $upstream_wasmcloud wasmcloud;
    location / {
      proxy_pass http://$upstream_wasmcloud:1337;
      proxy_set_header Host $host;
    }
  }

  # === wildcards ===
  server {
    listen 80;
    server_name *.chal.ctf.kuilin.net chal.ctf.kuilin.net;

    add_header 'Content-Type' 'text/plain' always;
    return 404 "Hello! This is the nginx server at ctf.kuilin.net.\n\nYou are authorized to non-disruptively attack *.chal.ctf.kuilin.net, but not CTFd or this nginx container itself.\n\nFor more info, see https://github.com/likuilin/ctf-challenges or contact me.";
  }

  server {
    listen 443 ssl;
    server_name *.chal.ctf.kuilin.net chal.ctf.kuilin.net;
    ssl_certificate /etc/letsencrypt/live/ctf.kuilin.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ctf.kuilin.net/privkey.pem;

    # all web chals should be http
    return 302 http://$host$request_uri;
  }

  server {
    listen 80 default_server;
    listen 443 ssl default_server;
    server_name _;
    ssl_certificate /etc/letsencrypt/live/ctf.kuilin.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ctf.kuilin.net/privkey.pem;

    add_header 'Content-Type' 'text/plain' always;
    return 404 "Please stop.";
  }
}
